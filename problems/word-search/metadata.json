{
  "id": "word-search",
  "title": "49. Word Search",
  "difficulty": "Medium",
  "category": "matrix",
  "link": "https://leetcode.com/problems/word-search/",
  "examples": [
    {
      "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
      "output": "true"
    },
    {
      "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
      "output": "true"
    },
    {
      "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
      "output": "false"
    }
  ],
  "starterCode": {
    "java": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n    }\n}",
    "python": "from typing import List\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        pass\n",
    "cpp": "#include <vector>\n#include <string>\nusing namespace std;\nclass Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        return false;\n    }\n};"
  },
  "testCases": [
    {
      "board": [
        [
          "A",
          "B",
          "C",
          "E"
        ],
        [
          "S",
          "F",
          "C",
          "S"
        ],
        [
          "A",
          "D",
          "E",
          "E"
        ]
      ],
      "word": "ABCCED"
    },
    {
      "board": [
        [
          "A",
          "B",
          "C",
          "E"
        ],
        [
          "S",
          "F",
          "C",
          "S"
        ],
        [
          "A",
          "D",
          "E",
          "E"
        ]
      ],
      "word": "SEE"
    },
    {
      "board": [
        [
          "A",
          "B"
        ],
        [
          "C",
          "D"
        ]
      ],
      "word": "ABCD"
    }
  ],
  "functionName": "exist",
  "params": [
    {
      "name": "board",
      "type": "char_array_2d",
      "visualizeType": "matrix"
    },
    {
      "name": "word",
      "type": "string"
    }
  ],
  "outputType": "boolean",
  "hints": [
    "Backtracking/DFS from each starting cell, marking visited cells, exploring four directions, and backtracking on mismatch."
  ]
}
