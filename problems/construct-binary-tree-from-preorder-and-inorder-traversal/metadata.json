{
  "id": "construct-binary-tree-from-preorder-and-inorder-traversal",
  "title": "67. Construct Binary Tree from Preorder and Inorder Traversal",
  "difficulty": "Medium",
  "link": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",
  "category": "tree",
  "examples": [
    {
      "input": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
      "output": "[3,9,20,null,null,15,7]"
    },
    {
      "input": "preorder = [-1], inorder = [-1]",
      "output": "[-1]"
    }
  ],
  "starterCode": {
    "java": "/*\nDefinition for a binary tree node.\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left = left; this.right = right; }\n}\n*/\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom typing import List\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]):\n        # TODO: reconstruct and return the tree root\n        pass\n",
    "cpp": "/*\nDefinition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(): val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x): val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right): val(x), left(left), right(right) {}\n};\n*/\n#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        \n    }\n};\n"
  },
  "testCases": [
    {
      "preorder": "[3,9,20,15,7]",
      "inorder": "[9,3,15,20,7]"
    },
    {
      "preorder": "[]",
      "inorder": "[]"
    },
    {
      "preorder": "[1,2]",
      "inorder": "[2,1]"
    },
    {
      "preorder": "[1,2,3]",
      "inorder": "[2,1,3]"
    },
    {
      "preorder": "[-1]",
      "inorder": "[-1]"
    }
  ],
  "functionName": "buildTree",
  "params": [
    {
      "name": "preorder",
      "type": "int_array"
    },
    {
      "name": "inorder",
      "type": "int_array"
    }
  ],
  "outputType": "tree_node",
  "hints": [
    "Use recursion with a hashmap of inorder indices to split left and right subtrees."
  ]
}
