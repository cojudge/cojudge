{
  "id": "pacific-atlantic-water-flow",
  "title": "29. Pacific Atlantic Water Flow",
  "difficulty": "Medium",
  "link": "https://leetcode.com/problems/pacific-atlantic-water-flow/",
  "category": "graph",
  "examples": [
    {
      "input": "heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
      "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] (order does not matter)"
    }
  ],
  "starterCode": {
    "java": "import java.util.*;\nclass Solution {\n    public int[][] pacificAtlantic(int[][] heights) {\n        \n    }\n}",
    "python": "from typing import List\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        pass\n",
    "cpp": "#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        return {};\n    }\n};"
  },
  "testCases": [
    {
      "heights": [
        [
          1,
          2,
          2,
          3,
          5
        ],
        [
          3,
          2,
          3,
          4,
          4
        ],
        [
          2,
          4,
          5,
          3,
          1
        ],
        [
          6,
          7,
          1,
          4,
          5
        ],
        [
          5,
          1,
          1,
          2,
          4
        ]
      ]
    },
    {
      "heights": [
        [
          1
        ]
      ]
    },
    {
      "heights": [
        [
          1,
          2
        ],
        [
          4,
          3
        ]
      ]
    }
  ],
  "functionName": "pacificAtlantic",
  "params": [
    {
      "name": "heights",
      "type": "int_array_2d"
    }
  ],
  "outputType": "int_array_2d",
  "hints": [
    "Run reverse-flow BFS/DFS from both oceans to find cells that can reach each ocean (moving from lower/equal to higher). The answer is the intersection of the two reachable sets."
  ]
}
