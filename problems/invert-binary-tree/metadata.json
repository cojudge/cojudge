{
  "id": "invert-binary-tree",
  "title": "62. Invert/Flip Binary Tree",
  "difficulty": "Easy",
  "link": "https://leetcode.com/problems/invert-binary-tree/",
  "category": "tree",
  "examples": [
    {
      "input": "root = [4,2,7,1,3,6,9]",
      "output": "[4,7,2,9,6,3,1]"
    },
    {
      "input": "root = [2,1,3]",
      "output": "[2,3,1]"
    },
    {
      "input": "root = []",
      "output": "[]"
    }
  ],
  "starterCode": {
    "java": "/*\nDefinition for a binary tree node.\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left = left; this.right = right; }\n}\n*/\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        \n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def invertTree(self, root):\n        # TODO: return the root of the inverted tree\n        pass\n",
    "cpp": "/*\nDefinition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(): val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x): val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right): val(x), left(left), right(right) {}\n};\n*/\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        \n    }\n};\n"
  },
  "testCases": [
    {
      "root": "[4,2,7,1,3,6,9]"
    },
    {
      "root": "[2,1,3]"
    },
    {
      "root": "[]"
    },
    {
      "root": "[1,null,2,null,3]"
    },
    {
      "root": "[1,2,null,3]"
    }
  ],
  "functionName": "invertTree",
  "params": [
    {
      "name": "root",
      "type": "tree_node",
      "visualizeType": "tree_node"
    }
  ],
  "outputType": "tree_node",
  "hints": [
    "Swap left and right children for every node (mirror the tree) using recursion or BFS."
  ]
}
