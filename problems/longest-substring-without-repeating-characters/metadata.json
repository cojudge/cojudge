{
  "id": "longest-substring-without-repeating-characters",
  "title": "50. Longest Substring Without Repeating Characters",
  "difficulty": "Medium",
  "link": "https://leetcode.com/problems/longest-substring-without-repeating-characters/",
  "category": "string",
  "examples": [
    {
      "input": "s=\"abcabcbb\"",
      "output": "3",
      "explanation": "The answer is \"abc\" with length 3."
    },
    {
      "input": "s=\"bbbbb\"",
      "output": "1",
      "explanation": "The answer is \"b\" with length 1."
    },
    {
      "input": "s=\"pwwkew\"",
      "output": "3",
      "explanation": "The answer is \"wke\" with length 3."
    }
  ],
  "starterCode": {
    "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}",
    "python": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        pass\n",
    "cpp": "#include <string>\nusing namespace std;\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        return 0;\n    }\n};"
  },
  "testCases": [
    {
      "s": "abcabcbb"
    },
    {
      "s": "bbbbb"
    },
    {
      "s": "pwwkew"
    },
    {
      "s": ""
    },
    {
      "s": "au"
    },
    {
      "s": "dvdf"
    }
  ],
  "functionName": "lengthOfLongestSubstring",
  "params": [
    {
      "name": "s",
      "type": "string"
    }
  ],
  "outputType": "int",
  "hints": [
    "Use a sliding window with a character index map to track the latest position of each character. Move the left bound when you encounter a repeat to maintain a window with all unique characters."
  ]
}
