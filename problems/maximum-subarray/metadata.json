{
  "id": "maximum-subarray",
  "title": "5. Maximum Subarray",
  "difficulty": "Medium",
  "category": "array",
  "link": "https://leetcode.com/problems/maximum-subarray/",
  "examples": [
    {
      "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
      "output": "6",
      "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
    },
    {
      "input": "nums = [1]",
      "output": "1"
    },
    {
      "input": "nums = [5,4,-1,7,8]",
      "output": "23"
    }
  ],
  "starterCode": {
    "java": "class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}",
    "python": "from typing import List\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ",
    "cpp": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        return 0;\n    }\n};"
  },
  "testCases": [
    {
      "nums": "[-2,1,-3,4,-1,2,1,-5,4]"
    },
    {
      "nums": "[1]"
    },
    {
      "nums": "[5,4,-1,7,8]"
    },
    {
      "nums": "[-1]"
    },
    {
      "nums": "[0]"
    }
  ],
  "functionName": "maxSubArray",
  "params": [
    {
      "name": "nums",
      "type": "int_array"
    }
  ],
  "outputType": "int",
  "hints": [
    "Find a contiguous subarray (one or more elements) that yields the highest possible total. A classic linear-time solution uses Kadane's algorithm by tracking a running sum and the best seen so far."
  ]
}
