{
  "id": "validate-binary-search-tree",
  "title": "68. Validate Binary Search Tree",
  "difficulty": "Medium",
  "link": "https://leetcode.com/problems/validate-binary-search-tree/",
  "category": "tree",
  "examples": [
    {
      "input": "root = [2,1,3]",
      "output": "true"
    },
    {
      "input": "root = [5,1,4,null,null,3,6]",
      "output": "false"
    },
    {
      "input": "root = []",
      "output": "true"
    }
  ],
  "starterCode": {
    "java": "/*\nDefinition for a binary tree node.\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left = left; this.right = right; }\n}\n*/\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def isValidBST(self, root) -> bool:\n        # TODO: return True if valid BST\n        pass\n",
    "cpp": "/*\nDefinition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(): val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x): val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right): val(x), left(left), right(right) {}\n};\n*/\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        \n    }\n};\n"
  },
  "testCases": [
    {
      "root": "[2,1,3]"
    },
    {
      "root": "[5,1,4,null,null,3,6]"
    },
    {
      "root": "[]"
    },
    {
      "root": "[1,1]"
    },
    {
      "root": "[2147483647]"
    }
  ],
  "functionName": "isValidBST",
  "params": [
    {
      "name": "root",
      "type": "tree_node",
      "visualizeType": "tree_node"
    }
  ],
  "outputType": "boolean",
  "hints": [
    "Use DFS with value bounds (min/max) to verify BST properties for every node."
  ]
}
